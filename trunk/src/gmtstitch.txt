#include "common_options.txt"
.TH GMTSTITCH 1 MANDATE GMT_STRING "Generic Mapping Tools"
.SH NAME
gmtstitch \- Join individual lines whose end points match within tolerance
.SH SYNOPSIS
BD(gmtstitch) [ IT(table) ] [ OPT(C)[IT(closed)] ] [ OPT(D)[IT(template)] ]
[ OPT(L)[IT(linkfile)] ] [ OPT(Q)[IT(template)] ] 
[ OPT(T)IT(cutoff)[IT(unit)][/IT(nn_dist)] ] [ GMT_V_OPT ] 
[ GMT_b_OPT ] [ GMT_bo_OPT ] [ GMT_f_OPT ] [ GMT_g_OPT ] [ GMT_h_OPT ] 
[ GMT_i_OPT ] [ GMT_o_OPT ] [ GMT_colon_OPT ]
.SH DESCRIPTION
BD(gmtstitch) reads standard input or one or more data files (which may be multisegment files; see OPT(m))
and examines the coordinates of the end points of all line segments.  If a pair of end points
are identical or closer to each other than the specified separation tolerance then the
two line segments are joined into a single segment.  The process repeats until all the
remaining endpoints no longer pass the tolerance test; the resulting segments are then
written out to standard output or specified output file.  It it is not clear what the separation tolerance should
be then use OPT(L) to get a list of all separation distances and analyze them to determine
a suitable cutoff.
#include "explain_commonitems.txt"
.SH REQUIRED ARGUMENTS
None.
.SH OPTIONAL ARGUMENTS
#include "explain_intables.txt"
.TP
OPT(C)[IT(closed)]
Write all the closed polygons to IT(closed) [gmtstitch_closed.d] and all other segments as they
are to stdout.  No stitching takes place.  Use OPT(T)IT(cutoff) to set a minimum separation [0],
and if IT(cutoff) is > 0 then we also close the polygons on output.
.TP
OPT(D)[IT(template)]
For multiple segment data, dump each segment to a separate output file [Default writes a single multiple segment
file].  Append a format template for the individual file names; this template BD(must) contain a
C format specifier that can format an integer argument (the segment number); this is usually %d but could
be %8.8d which gives leading zeros, etc. Optionally, it may also contain the format %c IT(before) the
integer; this will then be replaced by C (closed) or O (open) to indicate segment type.
[Default is gmtstitch_segment_%d.d].  Note that segment headers will be written in either case.
For composite segments, a generic segment header will be written and the segment headers of individual
pieces will be written out as comments to make it possible to identify where the stitched pieces came from.
.TP
OPT(L)[IT(linkfile)]
Writes the link information to the specified file [gmtstitch_link.d]. For each segment we write the original segment
id, and for the beginning and end point of the segment we report the id of the closest segment, whether it
is the beginning (B) or end (E) point that is closest, and the distance between those points in units determined
by OPT(T).
.TP
OPT(Q)[IT(template)]
Used with OPT(D) to a list file with the names of the individual output files.  Optionally, append a filename
template for the individual file names; this template BD(may) contain a
C format specifier that can format an character (C or O for closed or open, respectively). [Default is gmtstitch_list.d].
.TP
OPT(T)IT(cutoff)[IT(unit)][/IT(nn_dist)]
Specifies the separation tolerance in the data coordinate units [0]; append distance unit (see UNITS).
If two lines has end-points that are closer than this cutoff they will be joined.
Optionally, append /IT(nn_dist) which adds the requirement that a link will only be made if the
second closest connection exceeds the IT(nn_dist).  The latter distance must be given in the same
units as IT(cutoff).
#include "explain_-V.txt"
#include "explain_-bi.txt"
[Default is 2 input columns].
#include "explain_-bo.txt"
[Default is same as input].
#include "explain_-f.txt"
#include "explain_-g.txt"
#include "explain_-h.txt"
#include "explain_-icols.txt"
#include "explain_-ocols.txt"
#include "explain_colon.txt"
#include "explain_help.txt"
#include "explain_distunits.txt"
#include "explain_precision.txt"
.SH EXAMPLES
.sp
To combine the digitized segment lines segment_*.d (whose coordinates are in cm)
into as few complete lines as possible,
assuming the end points slop could be up to 0.1 mm, run
.br
.sp
gmtstitch segment_*.d -Tf0.1 > new_segments.d
.br
.sp
To combine the digitized segments in the multisegment file my_lines.d (whose coordinates are in lon,lat)
into as few complete lines as possible, assuming the end points slop could be up to 150 m, and write
the complete segments to separate files called Map_segment_0001.dat,  Map_segment_0002.dat, etc., run
.sp
gmtstitch my_lines.d -T150e -DMap_segment_%4.4d.dat
.sp
.SH "SEE ALSO"
.IR gmt (1),
.IR mapproject (1)
