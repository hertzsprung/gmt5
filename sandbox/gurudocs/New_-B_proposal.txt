		PROPOSAL FOR NEW -B SYNTAX
			Revised Jan, 27

Problem: The -B option is very confusing to users, even those
who have used GMT for decades, so the mnemonics are terrible.
Some characters have multiple meanings (i.e., s for south or
seconds), leading to potential misunderstanding.  The parser
is cluttered with helper functions that seek to prevent pslib
color escape sequences and Windows file syntax using colons
from being misconstrued as :<label>: entries.  Finally, scripts
that seek to build -B options must combine all desired settings
into a single long -B<string>, which adds to script complexity.

Solution: Break -B into many sub-options that only deal with
a small aspect of setting the frame and annotation parameters.
Consequently, the -B option can be given repeatedly, each time
operating on different aspects of the basemap construction.
We distinguish between frame-specific and axis-specific
information.  The former applies to the entire base frame
while the latter applies to a particular axis. Specifically,
this proposal ELIMINATES the slash as an axes item separator.

1. FRAME SETTINGS:
-Bf<args> sets parameters for the entire map frame.
   <args> is [WESNZwesnz[1234][+b]][+g<fill>][+t<title>]
   Append +g<fill> to paint frame interior [none].
   Append +o<lon/lat> to specify pole for oblique gridlines [NP].
   Append +t<title> to plot title [none].
     Lower case w,e,s,n,z will draw those axes, while
     upper case versions will both draw and annotate.
     If no axes are given we default to MAP_FRAME_AXES.
     For 3-D plots, add d to draw 3-D wire box. While
     z|Z automatically selects the vertical axis position
     you can override this by appending one or more of
     axes positions 1,2,3,4.

2. AXIS SETTINGS:
-B[p|s][x|y|z]<info>
  p is primary annotations [Default], s is secondary.
  x, y, z selects the axis [Default is both x and y].
  <info> is <intervals>[+l<label>][+p<prefix>][+s<suffix>].
  Alternatively, <intervals> and the optional modifiers may
  be given via separate -B switches, i.e.,
    -B[p|s][x|y|z]<intervals>
    -B[p|s][x|y|z][+l<label>][+p<prefix>][+s<suffix>]
    Append +l<label> to add label to this axis [none].
    Append +s<suffix> to set annotation suffix [none].
    Append +p<prefix> to set annotation prefix [none].
  <intervals> is itself a concatenation of one or more
  items of the form [t][<stride>][+|-<phase>][unit].
  t is from a,i,f,g and unit is <time-units> or m|s,
  or use c<custom.txt> for custom annot, tick, and grid intervals.
  If <stride> is omitted we automatically compute it.
  For logarithmic projection the <stride> may be followed
  by l (to plot log10(x)) or p (to plot 10^log10(x)).

  Note that for <title>, <label>, <prefix>, and <suffix>
  to contain a plus-sign you must repeat it, i.e ++.


Advantages of this syntax:

1) Breaks down a very complicated option into manageable pieces;
   this is helpful in scripts and documentation to avoid long lines.
2) Components are specified with +<flag> modifiers which are much
   easier to remember (e.g., +t<title> vs :.<title>:)
3) Avoids double meaning of some letters, e.g., s for both seconds
   and south [Issue #200] as these items now are separated.
4) Minimizes number of characters to be escaped for non-ambiguous
   parsing (only + is special and can be plotted if appearing twice;
   no longer any obscure octal code needed to print colons.
5) Intermediate parsing issues such as temporarily replacing @:<color>:
   with @; to avoid :label: parsing trouble can be eliminated.
   Under Windows, a filename X:\dir will no longer have to be
   temporarily replaced with X;\dir, for the same reasons.
6) The parser will be much simpler to maintain and less prone to error.

Q: Won't the optional +<phase> interfere with +<flag> modifiers?
A: We scan to the first + not preceded by a valid number, then
   split <intervals> from any +<modifiers>.  The <intervals>
   and the optional modifiers are then parsed separately.

Q: What if a user uses a slash (/) to separate x and y information?
A: Under GMT_COMPATIBILITY=4 this will work as before provided the user
   otherwise use GMT 4 syntax.  You cannot mix and match GMT4 and GMT5
   syntax.  Without GMT_COMPATIBILITY=4 a slash might simply be part of
   a title or label, or else it is an error.

Q: Will the changes break any backwards compatibility?
A: No. If any of the old-style flags or modifiers are detected we route
   the parsing through the obsolete workflow.  New syntax will be parsed
   through a new and simpler parser. We will not abandon the old syntax
   until GMT 6.

Q: Must we change all the example -B strings?
A: Yes, obviously, unless they are GMT5-ready, e.g., -B10 which means
   -Bx10 -By10 and no labels, titles, use default frame, etc.

Q: What if I want a plus-sign as part of my title?
A: Simply use two plus-signs, i.e., ++.

Example of -B option with old and new syntax:

Old: -B1000f250g250:"Topography (m)":/2f1g1:"Frequency"::",-%"::."My histogram":WEsn+glightblue

New: -BWEsn+t"My histogram"+glightblue -Bx1000f250g250+l"Topography (m)" -By2f1g1+l"Frequency"+s"%"

or   -BWEsn+t"My histogram"+glightblue -Bx+l"Topography (m)" -By+l"Frequency"+s"%" -Bx1000f250g250 -By2f1g1

--------------------- cut cut cut ----------------------------
3-D z-Axis background information:

The vertical z-axis, if selected, is automatically chosen.  The algorithm
sets
	quadrant = lrint (floor (C->current.proj.z_project.view_azimuth / 90.0)) + 1;
	
so quadrant is 1, 2, 3, or 4; it represents the quadrant of our view point.  Then, the z-axis to be plotted
is decided by these steps:

nesw[0] = C->current.proj.rect[YHI], nesw[1] = C->current.proj.rect[XHI], nesw[2] = C->current.proj.rect[YLO], nesw[3] = C->current.proj.rect[XLO];
xcorner = (C->current.proj.z_project.quadrant/2*2+1)%4;
ycorner = ((C->current.proj.z_project.quadrant+1)/2*2)%4;
GMT_xyz_to_xy (C, nesw[xcorner], nesw[ycorner], C->common.R.wesn[ZLO], &xx, &yy);	/* x.y location of vertical axis */

So these are the results from that obscure logic:
quadrant:	xcorner	ycorner	corner		corner_ID
----------------------------------------------------------
1		1	2	(XHI,YLO)	2	
2		3	2	(XLO,YLO)	1	
3		3	0	(XLO,YHI)	4	
4		1	0	(XHI,YHI)	3	

Here, corner_ID is our preferred order for reference, going counter-clockwise
from lower left.
To select one or more z-axes and override the auto selection, I propose we use
z|Z[<corners>]
where <corners> is a concatenation of any of 1, 2, 3, 4.  The default is auto as above.
