#define G_OPT_SI 10BD(c)
#define G_OPT_US 4BD(i)
#ifdef CONTOUR
#define LINETYPE contours
Controls the placement of labels along the LINETYPE.
#else
#define LINETYPE quoted lines
The required argument controls the placement of labels along the LINETYPE.
#endif
Choose among five controlling algorithms:
.RS
.TP
#ifdef CONTOUR
OPT(G)BD(d)IT(dist)[BD(c)|BD(i)|BD(p)] or OPT(G)BD(D)IT(dist)[BD(d)|BD(e)|BD(f)|BD(k)|BD(m)|BD(M)|BD(n)|BD(s)]
#else
BD(d)IT(dist)[BD(c)|BD(i)|BD(p)] or BD(D)IT(dist)[BD(d)|BD(e)|BD(f)|BD(k)|BD(m)|BD(M)|BD(n)|BD(s)]
#endif
For lower case BD(d), give distances between labels on the plot in your preferred measurement unit
BD(c) (cm), BD(i) (inch), or BD(p) (points), while for upper case BD(D), specify
distances in map units and append the unit; choose among BD(e) (m), BD(f) (foot), BD(k) (km), BD(M) (mile), BD(n)
(nautical mile) or BD(u) (US survey foot), and BD(d) (arc degree),  BD(m) (arc minute), or BD(s) (arc second).  [Default is G_OPT_SI or G_OPT_US].  As an option,
you can append /IT(fraction) which is used to place the very first label for each contour when the
cumulative along-contour distance equals IT(fraction * dist) [0.25].
.TP
#ifdef CONTOUR
OPT(G)BD(f)IT(ffile.d)
#else
BD(f)IT(ffile.d)
#endif
Reads the ascii file IT(ffile.d) and places labels at locations in the file
that matches locations along the LINETYPE.
Inexact matches and points outside the region are skipped.
.TP
#ifdef CONTOUR
OPT(G)BD(l|L)IT(line1)[,IT(line2),...]
#else
BD(l|L)IT(line1)[,IT(line2),...]
#endif
Give IT(start) and IT(stop) coordinates for one or
more comma-separated straight line segments.  Labels will be placed where these lines intersect the
LINETYPE.  The format of each IT(line) specification is IT(start/stop), where IT(start) and IT(stop)
are either a specified point IT(lon/lat) or a 2-character BD(XY) key that uses the justification
format employed in BD(pstext) to indicate a point on the map, given as [LCR][BMT].
#ifdef GRID
In addition, you may use Z+ and Z- which correspond to the locations of the global max and min locations in
the grid, respectively.
#endif
#ifdef CONTOUR
OPT(G)BD(L) will interpret the point pairs as defining great circles [Default is straight line].
#else
BD(L) will interpret the point pairs as defining great circles [Default is straight line].
#endif
.TP
#ifdef CONTOUR
OPT(G)BD(n)IT(n_label)
#else
BD(n)IT(n_label)
#endif
Specifies the number of equidistant labels for LINETYPE line [1].
Upper case
#ifdef CONTOUR
OPT(G)
#endif
BD(N) starts labeling exactly at the start of the line [Default centers them along the line].
#ifdef CONTOUR
OPT(G)
#endif
BD(N)-1 places one justified label at start, while
#ifdef CONTOUR
OPT(G)
#endif
BD(N)+1 places one justified
label at the end of LINETYPE.
Optionally, append /IT(min_dist)[BD(c)|BD(i)|BD(p)] to enforce that a minimum distance separation
between successive labels is enforced.
.TP
#ifdef CONTOUR
OPT(G)BD(x|X)IT(xfile.d)
#else
BD(x|X)IT(xfile.d)
#endif
Reads the multisegment file IT(xfile.d) and places labels at the intersections
between the LINETYPE and the lines in IT(xfile.d).
#ifdef CONTOUR
OPT(G)
#endif
BD(X) will resample the lines first along great-circle arcs.
.P
In addition, you may optionally append BD(+r)IT(radius)[BD(c)|BD(i)|BD(p)] to set a minimum label separation in the
x-y plane [no limitation].
.RE
