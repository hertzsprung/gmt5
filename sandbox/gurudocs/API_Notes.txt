This file is a draft - final version with be in rst and go into the API docs.
However, some of the details here are more proposals rather than full reality.
Specifically, I am trying to simplify the process of getting data in and out of
GMT from an external program without the current process:
(1) manually/explicitly dealing with allocation modes
(2) manually telling GMT what is external output via GMT_VIA_OUTPUT.

(1) was easily solved because the only purpose of GMT_VECTOR and GMT_MATRIX is to
facilitate exchange between user native data and GMT.  So any vectors or matrix
created with KNOWN dimensions are therefore input (GMT_IN) and can automatically
set alloc_mode = GMT_ALLOCATED_EXTERNALLY instead of the default GMT_ALLOCATED_BY_GMT.
This is now the behavior in the APIin 5.2.0.

(2) was dealt with by recognizing that for output we do not know a priori the
complete dimensions of the results.  Hence when vectors/matrices are created without
specifying row-lengths then we KNOW these are for output and we can automatically
set direction to GMT_OUT without forcing the user to set extra flags.
This is now the behavior in the API in 5.2.0.

=================================================================================

This file discusses issues that involve custom programs that need to pass data
from memory into GMT and to receive results from GMT back into its memory.
It is for these situations we designed the two interface structures
GMT_VECTOR and GMT_MATRIX.  GMT_VECTOR is used to pass several column vectors
as table data (GMT_DATASET), while GMT_MATRIX is usually used to pass a user
grid (GMT_GRID) but could also be used as table data.  Note that the data columns
can be of different types.  Here are some more details:

1. Passing user data into GMT.

1.1 Vectors.

Imagine a user program that has 3 arrays called lon, lat, z. Let us assume lon, lat
are float arrays and z is integer, all of length np.  We wish to use these data as
input to blockmedian.  Here is how:

a) Create a GMT_VECTOR structure for passing the data:
   uint64_t dim[2] = {3, np};	/* 3 columns np rows */
   V = GMT_Create_Data (API, GMT_IS_VECTOR, GMT_IS_POINT, 0, dim, NULL, NULL, 0, 0, NULL);
b) Assign your data points to the vector and specify data types:
   V->data[GMT_X] = lon;	V->type[GMT_X] = GMT_FLOAT;
   V->data[GMT_Y] = lon;	V->type[GMT_Y] = GMT_FLOAT;
   V->data[GMT_Z] = z;		V->type[GMT_Y] = GMT_INT;
c) Register the vector as an input resource:
   ID = GMT_Register_IO (API, GMT_IS_DATASET, GMT_IS_REFERENCE_VIA_VECTOR, GMT_IS_POINT,
	GMT_IN, NULL, V);
d) Obtain the internal "filename" to this resource:
   char ID_name[GMT_LEN16];
   GMT_Encode_ID (API, ID, ID_name);
e) Use this filename as any file name when specifying module table input.
f) When no longer needed, free the container via
   GMT_Destroy_Data (API, &V); /* Just free vector container; leave arrays alone */
   lon, lat, z are untouched by GMT and can be used further in your program.

1.2 Matrix

Imagine a user code that has a matrix called grid. Let us assume grid is a short int array,
with dimensions nrow x ncols, stored in row-major order.  We wish to use these data as
input to grdimage.  Here is how:

a) Create a GMT_MATRIX structure for passing the data:
   double range[4] = {xmin, xmax, ymin, ymax};	/* Data domain */
   double inc[2] = {xinc, yinc};		/* Data spacing */
   M = GMT_Create_Data (API, GMT_IS_MATRIX, GMT_IS_SURFACE, 0, NULL, range, inc, 0, -1, NULL);
b) Assign your data grid to the matrix and specify data type:
   M->data = grid;	M->type = GMT_SHORT;
c) Register the matrix as an input resource:
   ID = GMT_Register_IO (API, GMT_IS_GRID, GMT_IS_REFERENCE_VIA_MATRIX, GMT_IS_SURFACE,
	GMT_IN, NULL, M);
d) Obtain the internal "filename" to this resource:
   char ID_name[GMT_LEN16];
   GMT_Encode_ID (API, ID, ID_name);
e) Use this filename as any file name when specifying module grid input.
f) When no longer needed, free the matrix container via
   GMT_Destroy_Data (API, &M); /* Just free container; leave user grid alone */
   grid is untouched by GMT and can be used further in your program.

For instance, Matlab mex programs can use the above steps to pass any type of Matlab-allocated
data into GMT modules.  If passed as GMT_REFERENCE then data duplication will be avoided if
possible (this depends both on data types and matrix order.  GMT vectors are double and
GMT grids are floats; this avoids duplication unless matrix order is column-major).

2. Passing GMT data back to the user program.

2.1 Vectors.

Let us assume we wish to receive the result from blockmedian back into three new arrays
called mlon, mlat, mz, all floats.  Here is how:

a) Create a GMT_VECTOR structure for receiving the data:
   uint64_t dim[2] = {3, 0};	/* 3 columns unknown rows */
   /* Giving unknown row dimension tells GMT that this is for output; col dim is required */
   V = GMT_Create_Data (API, GMT_IS_VECTOR, GMT_IS_POINT, 0, dim, NULL, NULL, 0, 0, NULL);
b) Assign your data types:
   V->type[GMT_X] = V->type[GMT_Y] = V->type[GMT_Y] = GMT_FLOAT;
c) Register the vector as an output resource:
   ID = GMT_Register_IO (API, GMT_IS_DATASET, GMT_IS_REFERENCE_VIA_VECTOR, GMT_IS_POINT,
	GMT_OUT, NULL, V);
d) Obtain the internal "filename" to this resource:
   char ID_name[GMT_LEN16];
   GMT_Encode_ID (API, ID, ID_name);
e) Use this filename as any file name when specifying module table output.
f) To pass reference you can do
   mlon = V->data[GMT_X];
   mlat = V->data[GMT_Y];
   mz   = V->data[GMT_Z];
g) When no longer needed you can free all the allocated data via
   GMT_Destroy_Data (API, &V); /* Free container and GMT-allocated data */
   You are responsible for not using mlon, mlat, mz after this call.

2.2 Matrix.

Let us assume we wish to receive the result from surface back into a user matrix
called sgrid, a float array.  Here is how:

a) Create a GMT_MATRIX structure for receiving the data:
   uint64_t dim[2] = {0, 0};	/* Unknown dimensions */
   /* Giving unknown dimensions tells GMT that this is for output */
   M = GMT_Create_Data (API, GMT_IS_MATRIX, GMT_IS_SURFACE, 0, dim, NULL, NULL, 0, 0, NULL);
b) Assign your data type:
   M->type = GMT_FLOAT;
c) Register the matrix as an output resource:
   ID = GMT_Register_IO (API, GMT_IS_GRID, GMT_IS_REFERENCE_VIA_MATRIX, GMT_IS_SURFACE,
	GMT_OUT, NULL, M);
d) Obtain the internal "filename" to this resource:
   char ID_name[GMT_LEN16];
   GMT_Encode_ID (API, ID, ID_name);
e) Use this filename as any file name when specifying module grid output.
f) To pass reference you can do
   sgrid = M->data;
g) When no longer needed you can free all the allocated data via
   GMT_Destroy_Data (API, &M); /* Free container and GMT-allocated grid */
   You are responsible for not using sgrid after this call.

For instance, Matlab can use the above to access results from GMT.  Given Matlab users
are likely to mess with the results it is best to duplicate the results from GMT and
then destroy the GMT container.  This avoids painful memory leaks and odd crashes.
