#!/bin/sh
#	$Id: img2google,v 1.14 2009-04-16 02:43:12 guru Exp $
# Shell script that will generate a Google Earth png tile from
# Sandwell/Smith's 1x1 min Mercator topo.11.1img grid and add
# a basic KML wrapper for use in any Google Earth version.
# David Sandwell and Paul Wessel, March 2009
# Credit to Joaquim Luis for adding KML output from ps2raster

# Change these only if you know what you are doing!  Note this script
# is hardwired to do bathymetry.  You must change many things to have
# it plot crustal ages or gravity.
#------------------
TOPO=topo.11.1.img
INC=1
DPI=240
#------------------

if [ $# -eq 0 ]; then
cat << EOF >&2
	img2google - Create Google Earth KML tiles from the $TOPO bathymetry grid
	
	Usage: img2google -Rwest/east/south/north [imgfile] [-C] [-Gprefix] [-Qdocname/layername/altmode] [-V] [-Z[+]]
	
		-R Specify the region of interest
	OPTIONAL ARGUMENTS:
		imgfile is the 1x1 min topo img to use [topo.11.1.img]
		-C clip data above sealevel [No clipping]
		-G Set output file prefix [Default is topoN|S<north>E|W<west>]
		-Q Append KML docname/layername/altmode ["Predicted bathymetry"/"topoN|S<north>E|W<west>"/S]
		-V Optionally run in verbose mode
		-Z Create a zipped *.kmz file; append + to remove original KML/PNG files [no zipping]
EOF
	exit
fi

# Process the command line arguments

R=""
G=""
C=""
Q=""
V=""
Z=""
while [ ! x"$1" = x ]; do
	case $1
	in
		-R*)	R=$1;		# Got the region
			shift;;
		-C)		C=$1;		# use clipping
			shift;;
		-G*)	G=$1;		# Got the output namestem
			shift;;
		-Q*)	Q=$1;		# Got the KML infostrings
			shift;;
		-V)		V=$1;		# Verbose run
			shift;;
		-Z*)	Z=$1;		# Make KMZ file
			shift;;
		-*)		echo "$0: Unrecognized option $1" 1>&2;	# Bad option argument
			exit 1;;
		*)		TOPO=$1;	# The input file name
			shift;;
	esac
done
if [ X"$R" = "X" ]; then
	echo "$0: ERROR: Must specify the region:" 1>&2
fi

# 1. Make sure we have the img file either locally or via $GMT_IMGDIR

if [ ! -f $TOPO ]; then
	if [ "X$GMT_IMGDIR" = "X" ] || [ ! -f $GMT_IMGDIR/$TOPO ]; then
		echo "img2google: Cannot find $TOPO - exiting"
		exit 1
	fi
fi

# Compute dimension of plot in inches and use that as our papersize
w=`echo $R | awk -F/ '{print substr($1,3)}'`
e=`echo $R | awk -F/ '{print $2}'`
s=`echo $R | awk -F/ '{print $3}'`
n=`echo $R | awk -F/ '{print $4}'`
W=`gmtmath -Q -fg $e $w SUB =`
H=`gmtmath -Q -fg $n $s SUB =`

# 2. Extract the (x,y,z) of constrained nodes by extracting a grid with
#    NaNs were unconstrained, exclude NaNs, and capture points whose z < 0

img2grd $TOPO $R -T2 -S1 -m${INC} -E -D $V -G$$.tile.nc
grd2xyz $$.tile.nc -S -bod | gmtselect -Z-15000/-2.0 -bi3d > $$.track.xyz

# 3. get the topo data, this time including unconstrained estimates

img2grd $TOPO $R -T1 -S1 -m${INC} -E -D $V -G$$.tile.nc

#  4. make the image

# Create list of desired, irregular contours
cat << EOF > $$.intervals
-10000 C
-9000 C
-8000 C
-7000 C
-6000 C
-5000 C
-4000 C
-3000 C
-2000 C
-1000 C
-5500 C
-4500 C
-3500 C
-2500 C
-1500 C
-500 C
EOF
# -2000 contour drawn separately with black, heavier line
echo "-2000 C" > $$.int2000
makecpt -Ctopo -Z > $$.cpt
grdgradient $$.tile.nc $V -A340 -G$$.nc
grdmath $$.nc 12000 DIV = $$.tile_grad.nc
if [ X"$C" = "X" ]; then	# No clipping, just lay down image
	grdimage $$.tile.nc -I$$.tile_grad.nc -C$$.cpt -Jx1id -Y0 -X0 -K -P $V --DOTS_PR_INCH=${DPI} --ELLIPSOID=WGS-84 --PAPER_MEDIA=Custom_${W}ix${H}i > $$.ps
else	# Use GSHHS high clip path to only show ocean areas
	pscoast $R -Jx1id -Y0 -X0 -K -P $V --DOTS_PR_INCH=${DPI} --ELLIPSOID=WGS-84 --PAPER_MEDIA=Custom_${W}ix${H}i -Dh -Sc > $$.ps
	grdimage $$.tile.nc -I$$.tile_grad.nc -C$$.cpt -J -O -K $V --DOTS_PR_INCH=${DPI} --ELLIPSOID=WGS-84 >> $$.ps
fi
psxy $$.track.xyz -J $R -Sc.005i -G00 $V -O -K --DOTS_PR_INCH=${DPI} --ELLIPSOID=WGS-84 >> $$.ps
grdcontour $$.tile.nc -J -C$$.intervals -W1,80 -O -K $V --DOTS_PR_INCH=${DPI} --ELLIPSOID=WGS-84 >> $$.ps
grdcontour $$.tile.nc -J -C$$.int2000 -W1p,black -O -K $V --DOTS_PR_INCH=${DPI} --ELLIPSOID=WGS-84 >> $$.ps
if [ X"$C" = "X" ]; then
	psxy -R -J -O /dev/null >> $$.ps
else
	pscoast -O -Q >> $$.ps
fi
#
#  5. make the geotiff file
#
if [ X"$G" = "X" ]; then
	xtag=`echo $w | awk '{if ($1 < 0.0) {printf "W%g\n", -$1} else if ($1 > 180.0) {printf ("W%g\n", 360-$1)} else {printf "E%g\n", $1}}'`
	ytag=`echo $n | awk '{if ($1 < 0.0) {printf "S%g\n", -$1} else {printf "N%g\n", $1}}'`
	name="topo${ytag}${xtag}"
fi
if [ X"$Q" = "X" ]; then
	KML="Predicted bathymetry"/$name/S
else
	KML=`echo $Q | awk '{print substr($0,3)}'`
fi
if [ "X$G" = "X" ]; then
	mv -f $$.ps $name.ps
else
	name=`echo $G | awk '{print substr($1,3)}'`
	mv -f $$.ps $name.ps
fi
cp $name.ps save.ps
ps2raster $name.ps -A -E${DPI} -TG -Wg"$KML" $V
if [ ! "X$Z" = "X" ]; then	# zip up as one archive
	zip -rq9 $name.kmz $name.kml $name.png
	if [ "X$Z" = "X-Z+" ]; then
		rm -f $name.kml $name.png
	fi
fi
#  6. clean up
rm -f $$.* $name.ps
exit 0
