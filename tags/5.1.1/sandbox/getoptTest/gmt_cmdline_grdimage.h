/** @file gmt_cmdline_grdimage.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef GMT_CMDLINE_GRDIMAGE_H
#define GMT_CMDLINE_GRDIMAGE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef GMT_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define GMT_CMDLINE_PARSER_PACKAGE "grdimage"
#endif

#ifndef GMT_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define GMT_CMDLINE_PARSER_PACKAGE_NAME "grdimage"
#endif

#ifndef GMT_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define GMT_CMDLINE_PARSER_VERSION "5.0.2"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  char * cpt_file_arg;	/**< @brief Color palette file to convert z to rgb.  */
  char * cpt_file_orig;	/**< @brief Color palette file to convert z to rgb original value given at command line.  */
  const char *cpt_file_help; /**< @brief Color palette file to convert z to rgb help description.  */
  char * proj_arg;	/**< @brief Select map proJection.  */
  char * proj_orig;	/**< @brief Select map proJection original value given at command line.  */
  const char *proj_help; /**< @brief Select map proJection help description.  */
  char * boundary_arg;	/**< @brief Basemap boundary annotation attributes.  */
  char * boundary_orig;	/**< @brief Basemap boundary annotation attributes original value given at command line.  */
  const char *boundary_help; /**< @brief Basemap boundary annotation attributes help description.  */
  char * intens_file_arg;	/**< @brief Use illumination. Give name of intensity grid file.  */
  char * intens_file_orig;	/**< @brief Use illumination. Give name of intensity grid file original value given at command line.  */
  const char *intens_file_help; /**< @brief Use illumination. Give name of intensity grid file help description.  */
  const char *more_help; /**< @brief Allow for more plot code to be appended later help description.  */
  const char *over_help; /**< @brief Set Overlay plot mode, i.e., append to an existing plot help description.  */
  int portrait_flag;	/**< @brief Set Portrait page orientation (default=off).  */
  const char *portrait_help; /**< @brief Set Portrait page orientation help description.  */
  char * region_arg;	/**< @brief Specify the min/max coordinates of data region in user units.  */
  char * region_orig;	/**< @brief Specify the min/max coordinates of data region in user units original value given at command line.  */
  const char *region_help; /**< @brief Specify the min/max coordinates of data region in user units help description.  */
  char * time_arg;	/**< @brief Plot Unix System Time stamp [and optionally appended text].  */
  char * time_orig;	/**< @brief Plot Unix System Time stamp [and optionally appended text] original value given at command line.  */
  const char *time_help; /**< @brief Plot Unix System Time stamp [and optionally appended text] help description.  */
  int verbose_arg;	/**< @brief Change the verbosity level (default='1').  */
  char * verbose_orig;	/**< @brief Change the verbosity level original value given at command line.  */
  const char *verbose_help; /**< @brief Change the verbosity level help description.  */
  char * shift_x_arg;	/**< @brief X-shift origin of plot.  */
  char * shift_x_orig;	/**< @brief X-shift origin of plot original value given at command line.  */
  const char *shift_x_help; /**< @brief X-shift origin of plot help description.  */
  char * shift_y_arg;	/**< @brief Y-shift origin of plot.  */
  char * shift_y_orig;	/**< @brief Y-shift origin of plot original value given at command line.  */
  const char *shift_y_help; /**< @brief Y-shift origin of plot help description.  */
  int copies_arg;	/**< @brief Specify the number of copies (default='1').  */
  char * copies_orig;	/**< @brief Specify the number of copies original value given at command line.  */
  const char *copies_help; /**< @brief Specify the number of copies help description.  */
  char ** data_type_arg;	/**< @brief Special formatting of input/output columns (time or geographical).  */
  char ** data_type_orig;	/**< @brief Special formatting of input/output columns (time or geographical) original value given at command line.  */
  unsigned int data_type_min; /**< @brief Special formatting of input/output columns (time or geographical)'s minimum occurreces */
  unsigned int data_type_max; /**< @brief Special formatting of input/output columns (time or geographical)'s maximum occurreces */
  const char *data_type_help; /**< @brief Special formatting of input/output columns (time or geographical) help description.  */
  char * header_arg;	/**< @brief Input file has header records.  */
  char * header_orig;	/**< @brief Input file has header records original value given at command line.  */
  const char *header_help; /**< @brief Input file has header records help description.  */
  char * swap_arg;	/**< @brief Swap 1st and 2nd column on input and/or output.  */
  char * swap_orig;	/**< @brief Swap 1st and 2nd column on input and/or output original value given at command line.  */
  const char *swap_help; /**< @brief Swap 1st and 2nd column on input and/or output help description.  */
  char * output_arg;	/**< @brief Output file  (default=`stdout').  */
  char * output_orig;	/**< @brief Output file  (default=`stdout') original value given at command line.  */
  const char *output_help; /**< @brief Output file  (default=`stdout') help description.  */
  const char *help_help; /**< @brief Show help (required arguments only), and exit help description.  */
  const char *full_help_help; /**< @brief Show help, including hidden options, and exit help description.  */
  const char *detailed_help_help; /**< @brief Show help, including all details and hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  
  unsigned int cpt_file_given ;	/**< @brief Whether cpt-file was given.  */
  unsigned int proj_given ;	/**< @brief Whether proj was given.  */
  unsigned int boundary_given ;	/**< @brief Whether boundary was given.  */
  unsigned int intens_file_given ;	/**< @brief Whether intens-file was given.  */
  unsigned int more_given ;	/**< @brief Whether more was given.  */
  unsigned int over_given ;	/**< @brief Whether over was given.  */
  unsigned int portrait_given ;	/**< @brief Whether portrait was given.  */
  unsigned int region_given ;	/**< @brief Whether region was given.  */
  unsigned int time_given ;	/**< @brief Whether time was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int shift_x_given ;	/**< @brief Whether shift-x was given.  */
  unsigned int shift_y_given ;	/**< @brief Whether shift-y was given.  */
  unsigned int copies_given ;	/**< @brief Whether copies was given.  */
  unsigned int data_type_given ;	/**< @brief Whether data-type was given.  */
  unsigned int header_given ;	/**< @brief Whether header was given.  */
  unsigned int swap_given ;	/**< @brief Whether swap was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct gmt_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int gmt_cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use gmt_cmdline_parser_ext() instead
 */
int gmt_cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int gmt_cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct gmt_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int gmt_cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int gmt_cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void gmt_cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void gmt_cmdline_parser_print_full_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void gmt_cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void gmt_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a gmt_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void gmt_cmdline_parser_params_init(struct gmt_cmdline_parser_params *params);

/**
 * Allocates dynamically a gmt_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized gmt_cmdline_parser_params structure
 */
struct gmt_cmdline_parser_params *gmt_cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void gmt_cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void gmt_cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int gmt_cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* GMT_CMDLINE_GRDIMAGE_H */
