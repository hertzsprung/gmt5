	$Id: new_CPT_spec.txt,v 1.2 2007-08-30 17:57:24 guru Exp $

	GMT CPT format version 2

The new CPT 2 format is a cleaner and more compact format that its predecessor.  In particular, all fill specifications is a single word whereas in CPT v1 these could take up anything from 1-4 words, making the parsing challenging.  This document describes the proposed format.

Types of records allowed in a CPT file:

1. Comments, starting with #
2. Slice records specifying fill and labels
3. BNF records for domain not covered by (2), + fill for missing values (NaN)

The first record in the file MUST be of this format:

#GMT:CPT2

If it is not we immediately call the old CPT 1 parser.

Each slice record starts with a 3-char code composed of one TAG from each of the following three groups:
[Note: Instead of the 3-char code we could spell out the three names fully if you feel that is more readable for humans]

GROUP 1: Slice type

Name		TAG	Explanation
VARIABLE	V	Slices with continuously varying colors
CONSTANT	C	Slices with constant color or pattern for normal data
CATEGORY	I	Slices with constant color or pattern for categorical data. Data interpolation is not allowed.
BACKGRND	B	Anything below lowest z-value
FOREGRND	F	Anything above highest z-value
NANVALUE	N	Special color for missing data

GROUP 2: Annotation type:

Name	TAG	Explanation
LOWER	L	Annotate lower z-value
UPPER	U	Annotate upper z-value
BOTH	B	Annotate both lower and lower z-value
MID	M	Annotate the interval (used by psscale only)

GROUP 3: Annotation source:

Name	TAG	Explanation
VALUE	V	The z-values
LABEL	L	Text label
FILL	F	The fill specification
RANGE	R	z0 - z1

Some examples of 3-char codes:

VBV	A slice from z0 to z1 where color varies continuously and we wish to label both upper and lower boundary with the z value
CLV	A slice from z0 to z1 where fill remains constant and we wish to label the lower boundary with the z value
IML	A slice representing a particular category where fill is constant. Use given label for annotations for middle of interval.

[If we wanted to spell things out we would instead have VARIABLE BOTH VALUE instead of VBV]

The number of arguments following this 3-char code depends on the slice code:

V**	Z0 COLOR0 Z1 COLOR1 [LABEL]
C**	Z0 FILL Z1 [LABEL]
I**	Z0 FILL [LABEL]
BFN	FILL [LABEL]

Note a distinction is made between C and I specifications: C is a true interval from Z0 to Z1 even though fill is constant, whereas I truly is a single value.

FILL is either a PATTERN, COLOR or - (for no fill)

PATTERN	= p|P<dpi>/<pattern>[:B<color>[F<color>]]
COLOR	= <colorname>, <gray>, <r/g/b>, <h-s-v>, <c/m/y/k>

Annotations may use an optional LABEL specification.  E.g., LABEL may be "From %.2g to %.1g" and if annotation source is RANGE then these combine to give the final label.  In the case when source is LABEL then the LABEL is just a text string (which may be empty).

Any record may have an optional -W[L|U|B]<pen> which overrides the pen used to draw this particular line, symbol outline, etc.  

What are the benefits of making these big changes?:

1. Cleaner CPT format that is easier to parse by machine and read by humans
2. Enables more flexibility in labeling (source is a new mechanism, as is formatting)
3. New functionality in specifying pens that vary via the CPT lookup.
4. makecpt could accept a "key fill label" categorical fill specification as recently discussed and produce a compliant CPT file; this is in addition to normal makecpt operations.  makecpt could also have new options that specifies annotation source and label format so these can be produced automatically.
5. Standardizes on one way in GMT to specify fill.

What are the negatives?

1. Cannot ignore old parser; must keep that code around for some time.
	[But we can make a translator to help people convert (e.g., makecpt -F old.cpt > new.cpt)]
2. Some work writing the new parser (but internally in GMT there would not be any major changes other than to implement the new functionality afforded for labels and pens)


Think I don't yet like about the format:

1. All CPT files (v1+2) present slices (the interval) but also needs to say things about the boundaries between the slices (the contour).  At times there is potential conflicts (awkward to specify contour pens per slice since we need -WL<pen> for all slices but the last also needs a WU<pen>)
2. 