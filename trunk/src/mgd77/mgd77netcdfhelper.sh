#!/bin/sh
#
#	$Id: mgd77netcdfhelper.sh,v 1.15 2007-06-07 03:37:55 guru Exp $
#
#	Author:		P. Wessel
#	Date:		2005-OCT-14
#	Revised:	2007-JUN-06: Now store _REVISED attributes set by E77
#
# This script will automatically create three functions from info in mgd77.h:
#
# MGD77_Read_Header_Params	: Read the MGD77 header attributes from the netCDF file
# MGD77_Write_Header_Params	: Write the MGD77 header attributes to the netCDF file
# MGD77_Dump_Header_Params	: Display individual header attributes, one per line
#
# Code is placed in the file mgd77_functions.h which is included in mgd77.c
#
# The script is run when needed by the makefile
#

cat << EOF > mgd77_functions.h

/* START OF CODE GENERATED BY mgd77netcdfhelper.sh
 *    Copyright (c) 2005-2007 by P. Wessel
 *    See README file for copying and redistribution conditions.
 */

void MGD77_Get_Param (struct MGD77_CONTROL *F, char *name, char *value);
void MGD77_Put_Param (struct MGD77_CONTROL *F, char *name, int length, char *value);

void MGD77_Read_Header_Params (struct MGD77_CONTROL *F, struct MGD77_HEADER_PARAMS *P)
{
	/* Read the netCDF-encoded MGD77 header parameters as attributes of the data set.
	 * If orig is TRUE we will recover the original MGD77 parameters; otherwise we first
	 * look for revised parameters and fall back on the original if no revision is found. */
	
EOF
# 1. strip out the structure members only (except Record_Type), then replace brackets and ; with space to simplify processing in the loop below */
sed -n '/START OF MGD77_HEADER_PARAMS/,/END OF MGD77_HEADER_PARAMS/p' mgd77.h | egrep -v 'OF MGD77_HEADER_PARAMS|Sequence No|Record_Type' | tr '[];' '   ' > $$.1
key=0
while read type name L M; do		# We need a separate read/write statement for each attribute
	pre=""				# Normally, no prefix for character arrays
	cast=""
	n_item=1
	fmt="%s"
	if [ "X$L" = "X" ]; then	# No number means a single character
		length=1
		pre="&"			# We need to take address of a single char
#		fmt="%c"
	elif [ "X$M" = "X" ]; then	# Single text length given
		length="strlen (${pre}P->$name)"
	else				# 2-D text array, dim and length given, calc total size
		n_item=$L
		length=`echo $M $L | awk '{print $1*$2}'`
		cast="(char *)"
	fi
	if [ $key -eq 10 ] || [ $key -eq 33 ] || [ $key -eq 54 ] || [ $key -eq 56 ]; then	# Special handling since these are single characters that may be \0 
		echo "	MGD77_Get_Param (F, "\"$name\"", ${cast}${pre}P->$name);" >> mgd77_functions.h
		echo "	MGD77_Put_Param (F, "\"$name\"", $length, ${cast}${pre}P->$name);" >> $$.2
		echo "	(void) nc_del_att (F->nc_id, NC_GLOBAL, "\"${name}_REVISED\"");" >> $$.5
		# The next line gives "      Parameter_Name :Value".  This format is deliberate in that we may want to
		# use awk -F: to separate out the parameter ($1) and the value ($2). Remember Value could be a sentence with spaces!
		echo "	word[0] = P->$name;" >> $$.3
		echo "	if (F->Want_Header_Item[$key]) printf (\"%s %44s :${fmt}%c\", F->NGDC_id, \"$name\", word, EOL);" >> $$.3
	elif [ $n_item -ne 7 ]; then
		echo "	MGD77_Get_Param (F, "\"$name\"", ${cast}${pre}P->$name);" >> mgd77_functions.h
		echo "	MGD77_Put_Param (F, "\"$name\"", $length, ${cast}${pre}P->$name);" >> $$.2
		echo "	(void) nc_del_att (F->nc_id, NC_GLOBAL, "\"${name}_REVISED\"");" >> $$.5
		# The next line gives "      Parameter_Name :Value".  This format is deliberate in that we may want to
		# use awk -F: to separate out the parameter ($1) and the value ($2). Remember Value could be a sentence with spaces!
		echo "	if (F->Want_Header_Item[$key]) printf (\"%s %44s :${fmt}%c\", F->NGDC_id, \"$name\", P->$name, EOL);" >> $$.3
	else
		cast=""
		length=`echo $M | awk '{print $1-1}'`
		j=0
		while [ $j -lt $n_item ]; do
			k=$j
			j=`expr $j + 1`
			length="strlen (${pre}P->${name}[$k])"
			echo "	MGD77_Get_Param (F, "\"${name}_$j\"", ${cast}${pre}P->$name[$k]);" >> mgd77_functions.h
			echo "	MGD77_Put_Param (F, "\"${name}_$j\"", $length, ${cast}${pre}P->$name[$k]);" >> $$.2
			echo "	(void) nc_del_att (F->nc_id, NC_GLOBAL, "\"${name}_${j}_REVISED\"");" >> $$.5
			echo "	if (F->Want_Header_Item[$key]) printf (\"%s %44s :${fmt}%c\", F->NGDC_id, \"$name\", P->$name[$k], EOL);" >> $$.3
		done
	fi
	echo "	\"$name\"," >> $$.4
	key=`expr $key + 1`
done < $$.1
n_names=`cat $$.4 | wc -l | awk '{printf "%d\n", $1}'`
cat << EOF >> mgd77_functions.h
}

void MGD77_Write_Header_Params (struct MGD77_CONTROL *F, struct MGD77_HEADER_PARAMS *P)
{
	/* Write the MGD77 header parameters as attributes of the netCDF-encoded data set */
	
EOF
cat $$.2 >> mgd77_functions.h
cat << EOF >> mgd77_functions.h
}

void MGD77_Dump_Header_Params (struct MGD77_CONTROL *F, struct MGD77_HEADER_PARAMS *P)
{
	char word[2] = { '\0', '\0'}, EOL = '\n';

	/* Write all the individual MGD77 header parameters to stdout */

EOF
cat $$.3 >> mgd77_functions.h
cat << EOF >> mgd77_functions.h
}

void MGD77_Reset_Header_Params (struct MGD77_CONTROL *F)
{
	/* Remove the revised MGD77 header attributes so we return to the original values.
	 * Here we simply ignore return values since many of these are presumably unknown attributes */
	
	MGD77_nc_status (nc_redef (F->nc_id));

EOF
cat $$.5 >> mgd77_functions.h
cat << EOF >> mgd77_functions.h

	MGD77_nc_status (nc_enddef (F->nc_id));
}

void MGD77_Get_Param (struct MGD77_CONTROL *F, char *name, char *value)
{	/* Get a single parameter: original if requested, otherwise check for revised value first */

	if (!F->original) {	/* Must look for revised attribute first */
		char Att[64];
		sprintf (Att, "%s_REVISED", name);	/* Revised attributes have _REVISED at the end of their names */
		if (nc_get_att_text (F->nc_id, NC_GLOBAL, Att, value) == NC_NOERR)	return;	/* Found a revised attribute */
	}
	
	/* We get here if we want the original or could not find a revised value */
	
	MGD77_nc_status (nc_get_att_text (F->nc_id, NC_GLOBAL, name, value));
}

void MGD77_Put_Param (struct MGD77_CONTROL *F, char *name, int length, char *value)
{	/* Place a single revised parameter: use original attribute if requested;
	 * otherwise use a revised attribute name.
	 * FUnction assumes we are in define mode. */

	if (F->original)	/* Use original attribute name */
		MGD77_nc_status (nc_put_att_text (F->nc_id, NC_GLOBAL, name, length, value));
	else {	/* Create revised attribute first */
		char Att[64];
		sprintf (Att, "%s_REVISED", name);	/* Revised attributes have _REVISED at the end of their names */
		MGD77_nc_status (nc_put_att_text (F->nc_id, NC_GLOBAL, Att, length, value));
	}
}

char *MGD77_Header_Item[$n_names] = {
EOF
cat $$.4 >> mgd77_functions.h
cat << EOF >> mgd77_functions.h
};

/* END OF CODE GENERATED BY mgd77netcdfhelper.sh */

EOF

rm -f $$.*
echo "mgd77netcdfhelper.sh: mgd77_functions.h created"
